// Generated by CoffeeScript 1.10.0
(function() {
  var CBOR, ClassUtil, DontCallConstructor, IdentityKey, IdentityKeyPair, KeyPair, SecretKey, TypeUtil;

  CBOR = require('cbor-codec');

  DontCallConstructor = require('../errors/DontCallConstructor');

  ClassUtil = require('../util/ClassUtil');

  TypeUtil = require('../util/TypeUtil');

  IdentityKey = require('./IdentityKey');

  SecretKey = require('./SecretKey');

  KeyPair = require('./KeyPair');

  module.exports = IdentityKeyPair = (function() {
    function IdentityKeyPair() {
      throw new DontCallConstructor(this);
    }

    IdentityKeyPair["new"] = function() {
      var ikp, key_pair;
      key_pair = KeyPair["new"]();
      ikp = ClassUtil.new_instance(IdentityKeyPair);
      ikp.version = 1;
      ikp.secret_key = key_pair.secret_key;
      ikp.public_key = IdentityKey["new"](key_pair.public_key);
      return ikp;
    };

    IdentityKeyPair.prototype.serialise = function() {
      var e;
      e = new CBOR.Encoder();
      this.encode(e);
      return e.get_buffer();
    };

    IdentityKeyPair.deserialise = function(buf) {
      var d;
      TypeUtil.assert_is_instance(ArrayBuffer, buf);
      d = new CBOR.Decoder(buf);
      return IdentityKeyPair.decode(d);
    };

    IdentityKeyPair.prototype.encode = function(e) {
      e.object(3);
      e.u8(0);
      e.u8(this.version);
      e.u8(1);
      this.secret_key.encode(e);
      e.u8(2);
      return this.public_key.encode(e);
    };

    IdentityKeyPair.decode = function(d) {
      var i, nprops, ref, self;
      TypeUtil.assert_is_instance(CBOR.Decoder, d);
      self = ClassUtil.new_instance(IdentityKeyPair);
      nprops = d.object();
      for (i = 0, ref = nprops - 1; 0 <= ref ? i <= ref : i >= ref; 0 <= ref ? i++ : i--) {
        switch (d.u8()) {
          case 0:
            self.version = d.u8();
            break;
          case 1:
            self.secret_key = SecretKey.decode(d);
            break;
          case 2:
            self.public_key = IdentityKey.decode(d);
            break;
          default:
            d.skip();
        }
      }
      TypeUtil.assert_is_integer(self.version);
      TypeUtil.assert_is_instance(SecretKey, self.secret_key);
      TypeUtil.assert_is_instance(IdentityKey, self.public_key);
      return self;
    };

    return IdentityKeyPair;

  })();

}).call(this);
