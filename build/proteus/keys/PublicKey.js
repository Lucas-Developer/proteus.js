// Generated by CoffeeScript 1.10.0
(function() {
  var CBOR, ClassUtil, DontCallConstructor, PublicKey, TypeUtil;

  CBOR = require('cbor-codec');

  DontCallConstructor = require('../errors/DontCallConstructor');

  ClassUtil = require('../util/ClassUtil');

  TypeUtil = require('../util/TypeUtil');

  module.exports = PublicKey = (function() {
    function PublicKey() {
      throw new DontCallConstructor(this);
    }

    PublicKey["new"] = function(pub_edward, pub_curve) {
      var pk;
      TypeUtil.assert_is_instance(Uint8Array, pub_edward);
      TypeUtil.assert_is_instance(Uint8Array, pub_curve);
      pk = ClassUtil.new_instance(PublicKey);
      pk.pub_edward = pub_edward;
      pk.pub_curve = pub_curve;
      return pk;
    };


    /*
    This function can be used to verify a message signature.
    
    @param signature [Uint8Array] The signature to verify
    @param message [String, Uint8Array] The message from which the signature was computed.
    @return [bool] `true` if the signature is valid, `false` otherwise.
     */

    PublicKey.prototype.verify = function(signature, message) {
      TypeUtil.assert_is_instance(Uint8Array, signature);
      return sodium.crypto_sign_verify_detached(signature, message, this.pub_edward);
    };

    PublicKey.prototype.fingerprint = function() {
      return sodium.to_hex(this.pub_edward);
    };

    PublicKey.prototype.encode = function(e) {
      e.object(1);
      e.u8(0);
      return e.bytes(this.pub_edward);
    };

    PublicKey.decode = function(d) {
      var i, nprops, ref, self;
      TypeUtil.assert_is_instance(CBOR.Decoder, d);
      self = ClassUtil.new_instance(PublicKey);
      nprops = d.object();
      for (i = 0, ref = nprops - 1; 0 <= ref ? i <= ref : i >= ref; 0 <= ref ? i++ : i--) {
        switch (d.u8()) {
          case 0:
            self.pub_edward = new Uint8Array(d.bytes());
            break;
          default:
            d.skip();
        }
      }
      TypeUtil.assert_is_instance(Uint8Array, self.pub_edward);
      self.pub_curve = sodium.crypto_sign_ed25519_pk_to_curve25519(self.pub_edward);
      return self;
    };

    return PublicKey;

  })();

}).call(this);
