// Generated by CoffeeScript 1.10.0
(function() {
  var CBOR, ClassUtil, DontCallConstructor, IdentityKey, PublicKey, TypeUtil;

  CBOR = require('cbor-codec');

  DontCallConstructor = require('../errors/DontCallConstructor');

  ClassUtil = require('../util/ClassUtil');

  TypeUtil = require('../util/TypeUtil');

  PublicKey = require('./PublicKey');


  /*
  Construct a long-term identity key pair.
  
  Every client has a long-term identity key pair.
  Long-term identity keys are used to initialise “sessions” with other clients (triple DH).
   */

  module.exports = IdentityKey = (function() {
    function IdentityKey() {
      throw new DontCallConstructor(this);
    }

    IdentityKey["new"] = function(public_key) {
      var key;
      TypeUtil.assert_is_instance(PublicKey, public_key);
      key = ClassUtil.new_instance(IdentityKey);
      key.public_key = public_key;
      return key;
    };

    IdentityKey.prototype.fingerprint = function() {
      return this.public_key.fingerprint();
    };

    IdentityKey.prototype.toString = function() {
      return sodium.to_hex(this.public_key);
    };

    IdentityKey.prototype.encode = function(e) {
      e.object(1);
      e.u8(0);
      return this.public_key.encode(e);
    };

    IdentityKey.decode = function(d) {
      var i, nprops, public_key, ref;
      TypeUtil.assert_is_instance(CBOR.Decoder, d);
      public_key = null;
      nprops = d.object();
      for (i = 0, ref = nprops - 1; 0 <= ref ? i <= ref : i >= ref; 0 <= ref ? i++ : i--) {
        switch (d.u8()) {
          case 0:
            public_key = PublicKey.decode(d);
            break;
          default:
            d.skip();
        }
      }
      return IdentityKey["new"](public_key);
    };

    return IdentityKey;

  })();

}).call(this);
