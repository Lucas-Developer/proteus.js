// Generated by CoffeeScript 1.10.0
(function() {
  var CBOR, ClassUtil, DontCallConstructor, PublicKey, SecretKey, TypeUtil;

  CBOR = require('cbor-codec');

  DontCallConstructor = require('../errors/DontCallConstructor');

  ClassUtil = require('../util/ClassUtil');

  TypeUtil = require('../util/TypeUtil');

  PublicKey = require('./PublicKey');

  module.exports = SecretKey = (function() {
    function SecretKey() {
      throw new DontCallConstructor(this);
    }

    SecretKey["new"] = function(sec_edward, sec_curve) {
      var sk;
      TypeUtil.assert_is_instance(Uint8Array, sec_edward);
      TypeUtil.assert_is_instance(Uint8Array, sec_curve);
      sk = ClassUtil.new_instance(SecretKey);
      sk.sec_edward = sec_edward;
      sk.sec_curve = sec_curve;
      return sk;
    };


    /*
    This function can be used to compute a message signature.
    
    @param message [String, Uint8Array] Message to be signed
    @return [Uint8Array] A message signature
     */

    SecretKey.prototype.sign = function(message) {
      return sodium.crypto_sign_detached(message, this.sec_edward);
    };


    /*
    This function can be used to compute a shared secret given a user's secret key and another user's public key.
    
    @param public_key [Proteus.keys.PublicKey] Another user's public key
    @return [Uint8Array] Array buffer view of the computed shared secret
     */

    SecretKey.prototype.shared_secret = function(public_key) {
      TypeUtil.assert_is_instance(PublicKey, public_key);
      return sodium.crypto_scalarmult(this.sec_curve, public_key.pub_curve);
    };

    SecretKey.prototype.encode = function(e) {
      e.object(1);
      e.u8(0);
      return e.bytes(this.sec_edward);
    };

    SecretKey.decode = function(d) {
      var i, nprops, ref, self;
      TypeUtil.assert_is_instance(CBOR.Decoder, d);
      self = ClassUtil.new_instance(SecretKey);
      nprops = d.object();
      for (i = 0, ref = nprops - 1; 0 <= ref ? i <= ref : i >= ref; 0 <= ref ? i++ : i--) {
        switch (d.u8()) {
          case 0:
            self.sec_edward = new Uint8Array(d.bytes());
            break;
          default:
            d.skip();
        }
      }
      TypeUtil.assert_is_instance(Uint8Array, self.sec_edward);
      self.sec_curve = sodium.crypto_sign_ed25519_sk_to_curve25519(self.sec_edward);
      return self;
    };

    return SecretKey;

  })();

}).call(this);
